<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on rudra narayan</title>
    <link>https://notes.rudra.dev/posts/</link>
    <description>Recent content in Posts on rudra narayan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://notes.rudra.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate beautiful JSON from PostgreSQL</title>
      <link>https://notes.rudra.dev/posts/generate-beautiful-json-from-postgresql/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/generate-beautiful-json-from-postgresql/</guid>
      <description>PostgreSQL provides a set of built-in JSON creation functions that can be used to build basic JSON structures. This increases the performance up to 10 times more than building it at the back-end layer.
 This post is about building different JSON structures using PostgreSQL built-in functions. It doesn&amp;rsquo;t talk about storing and manipulating JSON in PostgreSQL.
 In order to proceed with some examples, first we need to setup a test database.</description>
    </item>
    
    <item>
      <title>Building a GitHub authentication service</title>
      <link>https://notes.rudra.dev/posts/building-a-github-auth-service/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/building-a-github-auth-service/</guid>
      <description>Recently I was building a GitHub OAuth app to authentiacate one my client-side application with GitHub. The application was all about taking notes and maintaining them on a private repository. I have had worked on such an architecture in one of my previous jobs where we have used AWS CodeCommit as an inventory of resources where the history and the changes were easier to maintain. So for me GitHub was the perfect choice as a free storage with elegant history/commit management.</description>
    </item>
    
    <item>
      <title>Rendering markdown from Flask</title>
      <link>https://notes.rudra.dev/posts/rendering-markdown-from-flask/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/rendering-markdown-from-flask/</guid>
      <description>In this post I am going to plug about a cool trick(probably useless) that I discovered geeking around the internet.
I was building a tiny microservice which would let the client side application securely authenticate with GitHub. After writing the only required API, I wanted to render the README.md file on the index page.
So I planned to convert markdown to html and serve the resultant string everytime we hit the index.</description>
    </item>
    
    <item>
      <title>Setting up a task scheduler in Flask</title>
      <link>https://notes.rudra.dev/posts/setting-up-a-task-scheduler-in-flask/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/setting-up-a-task-scheduler-in-flask/</guid>
      <description>The first thing that comes to mind while considering a task scheduler is a cron job. As most of the today&amp;rsquo;s servers are hosted on linux machines, setting a cron job for periodic task might seem like a good option for many. However in production having a crontab is nothing but a pain in the a**. It can be a bit tricky to configure different timezones depending upon the location of the server.</description>
    </item>
    
    <item>
      <title>A floating terminal for (Neo)vim</title>
      <link>https://notes.rudra.dev/posts/a-floating-terminal-for-vim/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/a-floating-terminal-for-vim/</guid>
      <description>I love working in terminal and editing with (Neo)vim . Though I have been using vim since my college days, for past two years I am using it as my full-time editor.
I remember vividly when I first switched to vim at work. It was a horrible experience for the first week which made me flood my vimrc file with plugins to make it work. I have definitely moved past that phase and learned to grok vi since then.</description>
    </item>
    
    <item>
      <title>Generate and serve files from Flask</title>
      <link>https://notes.rudra.dev/posts/generate-and-serve-files-from-flask/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/generate-and-serve-files-from-flask/</guid>
      <description>Flask is one of the most used python frameworks for web development. Its simplicity and extensibility makes it convenient for both small and large applications alike.
In this blog we are going to create a simple flask web application that will generate and serve files without storing them in the server.
 Note: For flask and python installation visit flask documentation  Let&amp;rsquo;s create a flask application with a basic route.</description>
    </item>
    
    <item>
      <title>Setting up (Neo)vim for React development</title>
      <link>https://notes.rudra.dev/posts/setting-up-vim-for-react/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/setting-up-vim-for-react/</guid>
      <description>It&amp;rsquo;s been 8 months since I have been using (neo)vim as my primary text editor. Initially it was incredibly tough to adopt and use it in work. Well that would be another story to tell.
Back then I was working mostly in backend using CoffeeScript (I know ðŸ™ˆ). VS Code had a little support for CoffeeScript so I didn&amp;rsquo;t had any problems using vim full time.
But things changed drastically when I moved into UI development this year.</description>
    </item>
    
    <item>
      <title>Maintaining multiple GitHub accounts</title>
      <link>https://notes.rudra.dev/posts/maintaining-multiple-github-accounts/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/maintaining-multiple-github-accounts/</guid>
      <description>I recently left a huge IT corporation for a promising startup.I was asked to change my GitHub handler name as it was too cool(I think) for them.Well instead of changing I created another account using my company email.
Now I got a problem.Every day when I come home and start hacking around my own projects I had to manually set my username and email id in git config in order to reflect my contributions in the graph and most of the time I forget to do so.</description>
    </item>
    
    <item>
      <title>Configuring nodejs and npm behind a proxy</title>
      <link>https://notes.rudra.dev/posts/configuring-npm-behind-a-proxy/</link>
      <pubDate>Sat, 27 May 2017 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/configuring-npm-behind-a-proxy/</guid>
      <description>For people who work in a company and squeez out some of their time to learn nodejs, setting up an dev-environment can be a real pain. Proxy servers are pretty common in college and business type institutions.
You can locate your proxy settings from your browser&amp;rsquo;s settings panel.
Using Proxy with NPM Once you have obtained the proxy settings (server URL, port, username and password); you need to configure your npm configurations as follows.</description>
    </item>
    
    <item>
      <title>CSS and JavaScript aren&#39;t byte code !!</title>
      <link>https://notes.rudra.dev/posts/css-and-js-are-not-bytecode/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0530</pubDate>
      
      <guid>https://notes.rudra.dev/posts/css-and-js-are-not-bytecode/</guid>
      <description>Disclaimer: I was a noob(literally) when I wrote it. I just didn&amp;rsquo;t wanted to delete it as it was my first blog.
 The earliest computers were often programmed without the help of a programming language, by writing programs in absolute machine language. The programs, in decimal or binary form (mostly binary),were read in from punched cards or magnetic tape or toggled in on switches on the front panel of the computer.</description>
    </item>
    
  </channel>
</rss>